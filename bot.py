import asyncio
import logging
import asyncpg
import os
import re
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.FileHandler('bot.log'), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv("Bot.env")

import os

class Config:
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    DATABASE_URL = os.getenv("DATABASE_URL")  # –£–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—à URL
    MANAGER_GROUP_ID = int(os.getenv("MANAGER_GROUP_ID"))

bot = Bot(token=Config.BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
pool = None


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class DriverStates(StatesGroup):
    REG_COMPANY = State()
    REG_FULL_NAME = State()
    REG_PHONE = State()
    REG_TRUCK = State()
    EDIT_COMPANY = State()
    EDIT_FULL_NAME = State()
    EDIT_PHONE = State()
    EDIT_TRUCK = State()
    SEND_TASK_ID = State()
    SEND_BOL = State()
    SEND_TRAILER = State()


# –ü–∞—Ç—Ç–µ—Ä–Ω—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
PHONE_PATTERN = re.compile(r'^\+?[1-9]\d{9,14}$')  # –ú–∏–Ω–∏–º—É–º 10 —Ü–∏—Ñ—Ä (—Å +)
BOL_PATTERN = re.compile(r'^\d{8,12}$')


async def init_db():
    global pool
    try:
        pool = await asyncpg.create_pool(dsn=Config.DATABASE_URL)
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        raise

async def execute(query: str, *args):
    async with pool.acquire() as conn:
        return await conn.execute(query, *args)


async def fetch(query: str, *args):
    async with pool.acquire() as conn:
        return await conn.fetch(query, *args)


async def fetchrow(query: str, *args):
    async with pool.acquire() as conn:
        return await conn.fetchrow(query, *args)


# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
async def setup_db():
    # –¢–∞–±–ª–∏—Ü–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π
    await execute(r'''
        CREATE TABLE IF NOT EXISTS drivers (
            id SERIAL PRIMARY KEY,
            driver_id BIGINT UNIQUE NOT NULL,
            company TEXT NOT NULL,
            full_name TEXT NOT NULL,
            phone TEXT NOT NULL CHECK (phone ~ '^\+?[1-9]\d{9,14}$'),
            truck_number TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT NOW()
        )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞—á
    await execute(r'''
        CREATE TABLE IF NOT EXISTS tasks (
            task_id SERIAL PRIMARY KEY,
            driver_id BIGINT NOT NULL,
            task_type TEXT NOT NULL,
            status TEXT NOT NULL DEFAULT 'created',
            manager_id BIGINT,
            bol_number TEXT,
            trailer_number TEXT,
            created_at TIMESTAMP NOT NULL DEFAULT NOW(),
            updated_at TIMESTAMP NOT NULL DEFAULT NOW()
        )
    ''')
    logger.info("–¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
async def update_task(task_id, **kwargs):
    set_clauses = ', '.join(f"{k} = ${i + 1}" for i, k in enumerate(kwargs.keys()))
    await execute(
        f"UPDATE tasks SET {set_clauses}, updated_at = NOW() WHERE task_id = ${len(kwargs) + 1}",
        *kwargs.values(),
        task_id
    )


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_menu():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–ù–æ–≤–∞—è —Å–º–µ–Ω–∞")],
            [types.KeyboardButton(text="–ù–æ–≤—ã–π —Ü–∏–∫–ª")],
            [types.KeyboardButton(text="–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–µ—Ä–µ—Ä—ã–≤–∞")],
            [types.KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è")],
            [types.KeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∫–∞")],
            [types.KeyboardButton(text="–ó–∞–≥—Ä—É–∑–∫–∞")],
            [types.KeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π")],
            [types.KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
        ],
        resize_keyboard=True
    )


def settings_menu():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")],
            [types.KeyboardButton(text="–ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
@dp.message(F.text.in_([
    "–ù–æ–≤–∞—è —Å–º–µ–Ω–∞",
    "–ù–æ–≤—ã–π —Ü–∏–∫–ª",
    "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–µ—Ä–µ—Ä—ã–≤–∞",
    "–î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è",
    "–ü—Ä–æ–≤–µ—Ä–∫–∞",
    "–ó–∞–≥—Ä—É–∑–∫–∞",
    "–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π"
]))
async def create_task(message: types.Message):
    driver = await fetchrow("SELECT * FROM drivers WHERE driver_id = $1", message.from_user.id)
    if not driver:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!")
        return

    task_type = message.text
    try:
        await execute("INSERT INTO tasks (driver_id, task_type) VALUES ($1, $2)", message.from_user.id, task_type)
        task_id = (await fetchrow("SELECT task_id FROM tasks ORDER BY task_id DESC LIMIT 1"))['task_id']

        await bot.send_message(
            Config.MANAGER_GROUP_ID,
            f"üì© –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ #{task_id} –æ—Ç {driver['full_name']} ({driver['company']}):\n"
            f"–¢–∏–ø: {task_type}",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[types.InlineKeyboardButton(text="–í–∑—è—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"take_{task_id}")]]
            )
        )

        await message.answer(f"–ó–∞–¥–∞—á–∞ #{task_id} —Å–æ–∑–¥–∞–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞...")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


# –í–∑—è—Ç–∏–µ –∑–∞–¥–∞—á–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
@dp.callback_query(F.data.startswith("take_"))
async def take_task(callback: types.CallbackQuery):
    task_id = int(callback.data.split("_")[1])
    manager_id = callback.from_user.id

    try:
        await update_task(task_id, status="in_progress", manager_id=manager_id)
        task = await fetchrow("SELECT * FROM tasks WHERE task_id = $1", task_id)
        driver_info = await fetchrow("SELECT full_name, company FROM drivers WHERE driver_id = $1", task['driver_id'])

        await bot.edit_message_text(
            chat_id=Config.MANAGER_GROUP_ID,
            message_id=callback.message.message_id,
            text=f"üì© –ó–∞–¥–∞—á–∞ #{task_id} (–í–∑—è—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {callback.from_user.full_name}):\n"
                 f"–¢–∏–ø: {task['task_type']}\n"
                 f"–í–æ–¥–∏—Ç–µ–ª—å: {driver_info['full_name']} ({driver_info['company']})",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[types.InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"finish_{task_id}")]]
            )
        )

        await bot.send_message(task['driver_id'],
                               f"–í–∞—à–∞ –∑–∞–¥–∞—á–∞ #{task_id} –≤–∑—è—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {callback.from_user.full_name}!")
        await callback.answer("–ó–∞–¥–∞—á–∞ –≤–∑—è—Ç–∞!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∑—è—Ç–∏—è –∑–∞–¥–∞—á–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
@dp.callback_query(F.data.startswith("finish_"))
async def finish_task(callback: types.CallbackQuery):
    task_id = int(callback.data.split("_")[1])
    manager_id = callback.from_user.id

    try:
        task = await fetchrow("SELECT * FROM tasks WHERE task_id = $1", task_id)
        if task['manager_id'] != manager_id:
            await callback.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —á—É–∂—É—é –∑–∞–¥–∞—á—É")
            return

        await update_task(task_id, status="completed")

        await bot.edit_message_text(
            chat_id=Config.MANAGER_GROUP_ID,
            message_id=callback.message.message_id,
            text=f"üì© –ó–∞–¥–∞—á–∞ #{task_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {callback.from_user.full_name}",
            reply_markup=None
        )

        await bot.send_message(
            task['driver_id'],
            f"–í–∞—à–∞ –∑–∞–¥–∞—á–∞ #{task_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {callback.from_user.full_name}!"
        )
        await callback.answer("–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


# –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏
@dp.message(F.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def start_send_data(message: types.Message, state: FSMContext):
    driver = await fetchrow("SELECT * FROM drivers WHERE driver_id = $1", message.from_user.id)
    if not driver:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏:")
    await state.set_state(DriverStates.SEND_TASK_ID)


@dp.message(DriverStates.SEND_TASK_ID)
async def process_task_id(message: types.Message, state: FSMContext):
    task_id_str = message.text.strip()
    if not task_id_str.isdigit():
        await message.answer("–ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        return

    task_id = int(task_id_str)
    task = await fetchrow(
        "SELECT * FROM tasks WHERE task_id = $1 AND driver_id = $2 AND status = 'in_progress'",
        task_id,
        message.from_user.id
    )

    if not task:
        await message.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
        return

    await state.update_data(task_id=task_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ BOL (–Ω–æ–º–µ—Ä –≥—Ä—É–∑–∞):")
    await state.set_state(DriverStates.SEND_BOL)


@dp.message(DriverStates.SEND_BOL)
async def process_bol(message: types.Message, state: FSMContext):
    bol = message.text.strip()
    if not BOL_PATTERN.match(bol):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç BOL (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 8-12 —Ü–∏—Ñ—Ä). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        return

    await state.update_data(bol=bol)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–µ–π–ª–µ—Ä–∞:")
    await state.set_state(DriverStates.SEND_TRAILER)


@dp.message(DriverStates.SEND_TRAILER)
async def process_trailer(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        task_id = data["task_id"]
        bol = data["bol"]
        trailer = message.text.strip()

        await update_task(task_id, bol_number=bol, trailer_number=trailer)
        await state.clear()

        await message.answer("–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –º–µ–Ω–µ–¥–∂–µ—Ä—É!", reply_markup=get_main_menu())

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        task = await fetchrow("SELECT * FROM tasks WHERE task_id = $1", task_id)
        manager_info = await fetchrow("SELECT manager_id FROM tasks WHERE task_id = $1", task_id)

        if manager_info and manager_info['manager_id']:
            await bot.send_message(
                manager_info['manager_id'],
                f"üì© –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ #{task_id}:\n"
                f"BOL: {bol}\n"
                f"–¢—Ä–µ–π–ª–µ—Ä: {trailer}"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
@dp.message(F.text == "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞")
async def check_task_status(message: types.Message):
    driver_id = message.from_user.id
    tasks = await fetch(
        "SELECT * FROM tasks WHERE driver_id = $1 ORDER BY updated_at DESC LIMIT 5",
        driver_id
    )

    if not tasks:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
        return

    for task in tasks:
        status_emoji = "‚è≥" if task['status'] == 'in_progress' else "‚úÖ"
        await message.answer(
            f"–ó–∞–¥–∞—á–∞ #{task['task_id']}:\n"
            f"–¢–∏–ø: {task['task_type']}\n"
            f"–°—Ç–∞—Ç—É—Å: {status_emoji} {task['status']}\n"
            f"BOL: {task['bol_number'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"–¢—Ä–µ–π–ª–µ—Ä: {task['trailer_number'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}"
        )


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è
@dp.message(F.text == "/start")
async def cmd_start(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state:
        await message.answer("–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /cancel")
        return

    driver = await fetchrow("SELECT * FROM drivers WHERE driver_id = $1", message.from_user.id)

    if driver:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!", reply_markup=get_main_menu())
    else:
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏", reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(DriverStates.REG_COMPANY)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
@dp.message(F.text == "/cancel")
async def cancel_registration(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state:
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu())
    else:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π")


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ–¥–∏—Ç–µ–ª—è
@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings(message: types.Message):
    driver = await fetchrow("SELECT * FROM drivers WHERE driver_id = $1", message.from_user.id)
    if not driver:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!")
        return

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=settings_menu())


@dp.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def edit_data(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(DriverStates.EDIT_COMPANY)


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
@dp.message(DriverStates.REG_COMPANY)
async def process_company(message: types.Message, state: FSMContext):
    company = message.text.strip()
    if not company:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return

    await state.update_data(company=company)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    await state.set_state(DriverStates.REG_FULL_NAME)


@dp.message(DriverStates.REG_FULL_NAME)
async def process_full_name(message: types.Message, state: FSMContext):
    full_name = message.text.strip()
    if not full_name:
        await message.answer("–§–ò–û –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return

    await state.update_data(full_name=full_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω (–ø—Ä–∏–º–µ—Ä: +71234567890):")
    await state.set_state(DriverStates.REG_PHONE)


@dp.message(DriverStates.REG_PHONE)
async def process_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    if not PHONE_PATTERN.match(phone):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü—Ä–∏–º–µ—Ä: +71234567890")
        return

    await state.update_data(phone=phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:")
    await state.set_state(DriverStates.REG_TRUCK)


@dp.message(DriverStates.REG_TRUCK)
async def process_truck(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        truck_number = message.text.strip()
        if not truck_number:
            await message.answer("–ù–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return

        await execute(
            "INSERT INTO drivers (driver_id, company, full_name, phone, truck_number) VALUES ($1, $2, $3, $4, $5)",
            message.from_user.id,
            data["company"],
            data["full_name"],
            data["phone"],
            truck_number
        )

        await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=get_main_menu())
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
@dp.message(DriverStates.EDIT_COMPANY)
async def process_edit_company(message: types.Message, state: FSMContext):
    company = message.text.strip()
    if not company:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return

    await state.update_data(company=company)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û:")
    await state.set_state(DriverStates.EDIT_FULL_NAME)


@dp.message(DriverStates.EDIT_FULL_NAME)
async def process_edit_full_name(message: types.Message, state: FSMContext):
    full_name = message.text.strip()
    if not full_name:
        await message.answer("–§–ò–û –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return

    await state.update_data(full_name=full_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:")
    await state.set_state(DriverStates.EDIT_PHONE)


@dp.message(DriverStates.EDIT_PHONE)
async def process_edit_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    if not PHONE_PATTERN.match(phone):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü—Ä–∏–º–µ—Ä: +71234567890")
        return

    await state.update_data(phone=phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:")
    await state.set_state(DriverStates.EDIT_TRUCK)


@dp.message(DriverStates.EDIT_TRUCK)
async def process_edit_truck(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        truck_number = message.text.strip()
        if not truck_number:
            await message.answer("–ù–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return

        await execute(
            "UPDATE drivers SET company = $1, full_name = $2, phone = $3, truck_number = $4 WHERE driver_id = $5",
            data["company"],
            data["full_name"],
            data["phone"],
            truck_number,
            message.from_user.id
        )

        await message.answer("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", reply_markup=get_main_menu())
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.message(F.text == "–ù–∞–∑–∞–¥")
async def back_to_main_menu(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_menu())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_unknown(message: types.Message):
    await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def on_startup():
    await init_db()
    await setup_db()
    await bot.delete_webhook()


async def main():
    await on_startup()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())